CCS PCM C Compiler, Version 5.049, 5967               13-Mar-22 23:23

               Filename:   C:\Users\Eray\Desktop\Pic168f77 Projeleri\Pic16f877 ve LDR ile Röle Kontrol\Pic16f877 ve LDR ile Röle Kontrol.lst

               ROM used:   526 words (6%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           20 (5%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   194
0003:  NOP
.................... #include<16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 0C,26
0005:  DATA 44,29
0006:  DATA 20,22
0007:  DATA E5,33
0008:  DATA 65,39
0009:  DATA 3D,10
000A:  DATA A5,3A
000B:  DATA 00,00
*
00EF:  MOVF   0B,W
00F0:  MOVWF  22
00F1:  BCF    0B.7
00F2:  BSF    03.5
00F3:  BSF    03.6
00F4:  BSF    0C.7
00F5:  BSF    0C.0
00F6:  NOP
00F7:  NOP
00F8:  BCF    03.5
00F9:  BCF    03.6
00FA:  BTFSC  22.7
00FB:  BSF    0B.7
00FC:  BTFSC  03.0
00FD:  GOTO   126
00FE:  BSF    03.6
00FF:  MOVF   0C,W
0100:  ANDLW  7F
0101:  BCF    03.6
0102:  MOVWF  22
0103:  BSF    03.6
0104:  MOVF   0D,W
0105:  BCF    03.6
0106:  MOVWF  23
0107:  BSF    03.6
0108:  MOVF   0F,W
0109:  BCF    03.6
010A:  MOVWF  24
010B:  MOVF   22,W
010C:  MOVWF  25
010D:  CALL   0C3
010E:  MOVF   23,W
010F:  BSF    03.6
0110:  MOVWF  0D
0111:  BCF    03.6
0112:  MOVF   24,W
0113:  BSF    03.6
0114:  MOVWF  0F
0115:  BCF    03.6
0116:  MOVF   0B,W
0117:  MOVWF  25
0118:  BCF    0B.7
0119:  BSF    03.5
011A:  BSF    03.6
011B:  BSF    0C.7
011C:  BSF    0C.0
011D:  NOP
011E:  NOP
011F:  BCF    03.5
0120:  BCF    03.6
0121:  BTFSC  25.7
0122:  BSF    0B.7
0123:  DECFSZ 21,F
0124:  GOTO   126
0125:  GOTO   145
0126:  BSF    03.6
0127:  RLF    0C,W
0128:  RLF    0E,W
0129:  ANDLW  7F
012A:  BCF    03.6
012B:  MOVWF  22
012C:  BSF    03.6
012D:  MOVF   0D,W
012E:  BCF    03.6
012F:  MOVWF  23
0130:  BSF    03.6
0131:  MOVF   0F,W
0132:  BCF    03.6
0133:  MOVWF  24
0134:  MOVF   22,W
0135:  MOVWF  25
0136:  CALL   0C3
0137:  MOVF   23,W
0138:  BSF    03.6
0139:  MOVWF  0D
013A:  BCF    03.6
013B:  MOVF   24,W
013C:  BSF    03.6
013D:  MOVWF  0F
013E:  INCF   0D,F
013F:  BTFSC  03.2
0140:  INCF   0F,F
0141:  BCF    03.0
0142:  BCF    03.6
0143:  DECFSZ 21,F
0144:  GOTO   0EF
0145:  BCF    0A.3
0146:  BCF    0A.4
0147:  GOTO   1DA (RETURN)
0148:  MOVF   24,W
0149:  CLRF   78
014A:  SUBWF  23,W
014B:  BTFSC  03.0
014C:  GOTO   150
014D:  MOVF   23,W
014E:  MOVWF  77
014F:  GOTO   15C
0150:  CLRF   77
0151:  MOVLW  08
0152:  MOVWF  25
0153:  RLF    23,F
0154:  RLF    77,F
0155:  MOVF   24,W
0156:  SUBWF  77,W
0157:  BTFSC  03.0
0158:  MOVWF  77
0159:  RLF    78,F
015A:  DECFSZ 25,F
015B:  GOTO   153
015C:  RETURN
015D:  MOVF   78,W
015E:  MOVF   21,W
015F:  MOVWF  23
0160:  MOVLW  64
0161:  MOVWF  24
0162:  CALL   148
0163:  MOVF   77,W
0164:  MOVWF  21
0165:  MOVF   78,W
0166:  MOVLW  30
0167:  BTFSS  03.2
0168:  GOTO   170
0169:  BTFSS  22.1
016A:  GOTO   177
016B:  BTFSC  22.3
016C:  GOTO   177
016D:  BTFSC  22.4
016E:  MOVLW  20
016F:  GOTO   173
0170:  BCF    22.3
0171:  BCF    22.4
0172:  BSF    22.0
0173:  ADDWF  78,F
0174:  MOVF   78,W
0175:  MOVWF  25
0176:  CALL   0C3
0177:  MOVF   21,W
0178:  MOVWF  23
0179:  MOVLW  0A
017A:  MOVWF  24
017B:  CALL   148
017C:  MOVF   77,W
017D:  MOVWF  21
017E:  MOVF   78,W
017F:  MOVLW  30
0180:  BTFSS  03.2
0181:  GOTO   188
0182:  BTFSC  22.3
0183:  GOTO   18C
0184:  BTFSS  22.0
0185:  GOTO   18C
0186:  BTFSC  22.4
0187:  MOVLW  20
0188:  ADDWF  78,F
0189:  MOVF   78,W
018A:  MOVWF  25
018B:  CALL   0C3
018C:  MOVLW  30
018D:  ADDWF  21,F
018E:  MOVF   21,W
018F:  MOVWF  25
0190:  CALL   0C3
0191:  BCF    0A.3
0192:  BCF    0A.4
0193:  GOTO   1DF (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #device ADC = 10; 
....................  
.................... #use delay(clock = 4000000) 
*
000C:  MOVLW  26
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   020
0012:  MOVLW  01
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  4A
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  GOTO   01E
001E:  DECFSZ 00,F
001F:  GOTO   012
0020:  RETURN
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
....................  
.................... #define use_portb_lcd TRUE 
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0039:  MOVLW  0F
003A:  BSF    03.5
003B:  ANDWF  06,W
003C:  IORLW  F0
003D:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
003E:  BCF    03.5
003F:  BSF    06.2
....................    delay_cycles(1); 
0040:  NOP
....................    lcd_output_enable(1); 
0041:  BSF    06.0
....................    delay_cycles(1); 
0042:  NOP
....................    high = lcd_read_nibble(); 
0043:  CALL   02D
0044:  MOVF   78,W
0045:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
0046:  BCF    06.0
....................    delay_cycles(1); 
0047:  NOP
....................    lcd_output_enable(1); 
0048:  BSF    06.0
....................    delay_us(1); 
0049:  NOP
....................    low = lcd_read_nibble(); 
004A:  CALL   02D
004B:  MOVF   78,W
004C:  MOVWF  2C
....................        
....................    lcd_output_enable(0); 
004D:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
004E:  MOVLW  0F
004F:  BSF    03.5
0050:  ANDWF  06,W
0051:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0052:  BCF    03.5
0053:  SWAPF  2D,W
0054:  MOVWF  77
0055:  MOVLW  F0
0056:  ANDWF  77,F
0057:  MOVF   77,W
0058:  IORWF  2C,W
0059:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002D:  MOVF   06,W
002E:  MOVWF  77
002F:  SWAPF  06,W
0030:  ANDLW  0F
0031:  MOVWF  78
....................   #endif 
0032:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0021:  SWAPF  2D,W
0022:  ANDLW  F0
0023:  MOVWF  77
0024:  MOVLW  0F
0025:  ANDWF  06,W
0026:  IORWF  77,W
0027:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0028:  NOP
....................    lcd_output_enable(1); 
0029:  BSF    06.0
....................    delay_us(2); 
002A:  GOTO   02B
....................    lcd_output_enable(0); 
002B:  BCF    06.0
002C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0033:  BSF    03.5
0034:  BCF    06.0
....................    lcd_rs_tris(); 
0035:  BCF    06.1
....................    lcd_rw_tris(); 
0036:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0037:  BCF    03.5
0038:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005A:  MOVF   78,W
005B:  MOVWF  2C
005C:  BTFSC  2C.7
005D:  GOTO   039
....................    lcd_output_rs(address); 
005E:  BTFSS  2A.0
005F:  BCF    06.1
0060:  BTFSC  2A.0
0061:  BSF    06.1
....................    delay_cycles(1); 
0062:  NOP
....................    lcd_output_rw(0); 
0063:  BCF    06.2
....................    delay_cycles(1); 
0064:  NOP
....................    lcd_output_enable(0); 
0065:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0066:  SWAPF  2B,W
0067:  MOVWF  2C
0068:  MOVLW  0F
0069:  ANDWF  2C,F
006A:  MOVF   2C,W
006B:  MOVWF  2D
006C:  CALL   021
....................    lcd_send_nibble(n & 0xf); 
006D:  MOVF   2B,W
006E:  ANDLW  0F
006F:  MOVWF  2C
0070:  MOVWF  2D
0071:  CALL   021
0072:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0073:  MOVLW  28
0074:  MOVWF  22
0075:  MOVLW  0C
0076:  MOVWF  23
0077:  MOVLW  01
0078:  MOVWF  24
0079:  MOVLW  06
007A:  MOVWF  25
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
007B:  BCF    06.0
....................    lcd_output_rs(0); 
007C:  BCF    06.1
....................    lcd_output_rw(0); 
007D:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007E:  MOVLW  0F
007F:  BSF    03.5
0080:  ANDWF  06,W
0081:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0082:  BCF    06.0
....................    lcd_rs_tris(); 
0083:  BCF    06.1
....................    lcd_rw_tris(); 
0084:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0085:  MOVLW  0F
0086:  BCF    03.5
0087:  MOVWF  26
0088:  CALL   00C
....................    for(i=1;i<=3;++i) 
0089:  MOVLW  01
008A:  MOVWF  21
008B:  MOVF   21,W
008C:  SUBLW  03
008D:  BTFSS  03.0
008E:  GOTO   097
....................    { 
....................        lcd_send_nibble(3); 
008F:  MOVLW  03
0090:  MOVWF  2D
0091:  CALL   021
....................        delay_ms(5); 
0092:  MOVLW  05
0093:  MOVWF  26
0094:  CALL   00C
0095:  INCF   21,F
0096:  GOTO   08B
....................    } 
....................     
....................    lcd_send_nibble(2); 
0097:  MOVLW  02
0098:  MOVWF  2D
0099:  CALL   021
....................    delay_ms(5); 
009A:  MOVLW  05
009B:  MOVWF  26
009C:  CALL   00C
....................    for(i=0;i<=3;++i) 
009D:  CLRF   21
009E:  MOVF   21,W
009F:  SUBLW  03
00A0:  BTFSS  03.0
00A1:  GOTO   0AE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A2:  MOVLW  22
00A3:  ADDWF  21,W
00A4:  MOVWF  04
00A5:  BCF    03.7
00A6:  MOVF   00,W
00A7:  MOVWF  26
00A8:  CLRF   2A
00A9:  MOVF   26,W
00AA:  MOVWF  2B
00AB:  CALL   033
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AC:  INCF   21,F
00AD:  GOTO   09E
00AE:  BCF    0A.3
00AF:  BCF    0A.4
00B0:  GOTO   1BE (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B1:  DECFSZ 27,W
00B2:  GOTO   0B4
00B3:  GOTO   0B7
....................       address=LCD_LINE_TWO; 
00B4:  MOVLW  40
00B5:  MOVWF  28
00B6:  GOTO   0B8
....................    else 
....................       address=0; 
00B7:  CLRF   28
....................       
....................    address+=x-1; 
00B8:  MOVLW  01
00B9:  SUBWF  26,W
00BA:  ADDWF  28,F
....................    lcd_send_byte(0,0x80|address); 
00BB:  MOVF   28,W
00BC:  IORLW  80
00BD:  MOVWF  29
00BE:  CLRF   2A
00BF:  MOVF   29,W
00C0:  MOVWF  2B
00C1:  CALL   033
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C2:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C3:  MOVF   25,W
00C4:  XORLW  07
00C5:  BTFSC  03.2
00C6:  GOTO   0D1
00C7:  XORLW  0B
00C8:  BTFSC  03.2
00C9:  GOTO   0D6
00CA:  XORLW  06
00CB:  BTFSC  03.2
00CC:  GOTO   0DE
00CD:  XORLW  02
00CE:  BTFSC  03.2
00CF:  GOTO   0E4
00D0:  GOTO   0E9
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D1:  MOVLW  01
00D2:  MOVWF  26
00D3:  MOVWF  27
00D4:  CALL   0B1
00D5:  GOTO   0EE
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00D6:  CLRF   2A
00D7:  MOVLW  01
00D8:  MOVWF  2B
00D9:  CALL   033
....................                      delay_ms(2); 
00DA:  MOVLW  02
00DB:  MOVWF  26
00DC:  CALL   00C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00DD:  GOTO   0EE
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00DE:  MOVLW  01
00DF:  MOVWF  26
00E0:  MOVLW  02
00E1:  MOVWF  27
00E2:  CALL   0B1
00E3:  GOTO   0EE
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E4:  CLRF   2A
00E5:  MOVLW  10
00E6:  MOVWF  2B
00E7:  CALL   033
00E8:  GOTO   0EE
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00E9:  MOVLW  01
00EA:  MOVWF  2A
00EB:  MOVF   25,W
00EC:  MOVWF  2B
00ED:  CALL   033
....................      #endif 
....................    } 
00EE:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned int deger; 
....................  
.................... void main(){ 
*
0194:  MOVF   03,W
0195:  ANDLW  1F
0196:  MOVWF  03
0197:  BSF    03.5
0198:  BSF    1F.0
0199:  BSF    1F.1
019A:  BSF    1F.2
019B:  BCF    1F.3
019C:  BCF    03.7
.................... setup_psp(PSP_DISABLED); 
019D:  BCF    09.4
.................... setup_timer_1(T1_DISABLED); 
019E:  BCF    03.5
019F:  CLRF   10
.................... setup_timer_2(T2_DISABLED,0,1); 
01A0:  MOVLW  00
01A1:  MOVWF  78
01A2:  MOVWF  12
01A3:  MOVLW  00
01A4:  BSF    03.5
01A5:  MOVWF  12
.................... setup_ccp1(CCP_OFF); 
01A6:  MOVLW  F0
01A7:  BCF    03.5
01A8:  ANDWF  17,F
.................... setup_ccp2(CCP_OFF); 
01A9:  ANDWF  1D,F
....................  
.................... setup_adc(adc_clock_div_32);  
01AA:  BCF    1F.6
01AB:  BSF    1F.7
01AC:  BSF    03.5
01AD:  BSF    1F.7
01AE:  BCF    03.5
01AF:  BSF    1F.0
.................... setup_adc_ports(ALL_ANALOG); 
01B0:  BSF    03.5
01B1:  BCF    1F.0
01B2:  BCF    1F.1
01B3:  BCF    1F.2
01B4:  BCF    1F.3
....................  
.................... set_tris_a(0x20); 
01B5:  MOVLW  20
01B6:  MOVWF  05
.................... set_tris_b(0x00); 
01B7:  MOVLW  00
01B8:  MOVWF  06
.................... set_tris_c(0x00); 
01B9:  MOVWF  07
....................  
.................... output_b(0x00); 
01BA:  BCF    03.5
01BB:  CLRF   06
.................... output_c(0x00); 
01BC:  CLRF   07
....................  
.................... lcd_init(); 
01BD:  GOTO   073
....................  
.................... set_adc_channel(4); 
01BE:  MOVLW  20
01BF:  MOVWF  78
01C0:  MOVF   1F,W
01C1:  ANDLW  C7
01C2:  IORWF  78,W
01C3:  MOVWF  1F
....................  
.................... while(true){ 
.................... deger = read_adc(); 
01C4:  BSF    1F.2
01C5:  BTFSC  1F.2
01C6:  GOTO   1C5
01C7:  BSF    03.5
01C8:  MOVF   1E,W
01C9:  BCF    03.5
01CA:  MOVWF  20
.................... delay_us(20); 
01CB:  MOVLW  06
01CC:  MOVWF  77
01CD:  DECFSZ 77,F
01CE:  GOTO   1CD
01CF:  NOP
....................  
.................... printf(lcd_putc,"\fLDR Deger= %u",deger); 
01D0:  MOVLW  04
01D1:  BSF    03.6
01D2:  MOVWF  0D
01D3:  MOVLW  00
01D4:  MOVWF  0F
01D5:  BCF    03.0
01D6:  MOVLW  0C
01D7:  BCF    03.6
01D8:  MOVWF  21
01D9:  GOTO   0EF
01DA:  MOVF   20,W
01DB:  MOVWF  21
01DC:  MOVLW  1B
01DD:  MOVWF  22
01DE:  GOTO   15D
.................... delay_ms(100); 
01DF:  MOVLW  64
01E0:  MOVWF  26
01E1:  CALL   00C
....................  
.................... switch(deger){ 
01E2:  MOVF   20,W
01E3:  XORLW  F5
01E4:  BTFSC  03.2
01E5:  GOTO   1FC
01E6:  XORLW  3B
01E7:  BTFSC  03.2
01E8:  GOTO   1FE
01E9:  XORLW  6C
01EA:  BTFSC  03.2
01EB:  GOTO   200
01EC:  XORLW  F6
01ED:  BTFSC  03.2
01EE:  GOTO   202
01EF:  XORLW  FE
01F0:  BTFSC  03.2
01F1:  GOTO   204
01F2:  XORLW  55
01F3:  BTFSC  03.2
01F4:  GOTO   206
01F5:  XORLW  AA
01F6:  BTFSC  03.2
01F7:  GOTO   208
01F8:  XORLW  08
01F9:  BTFSC  03.2
01FA:  GOTO   20A
01FB:  GOTO   20B
.................... case 245: 
.................... output_high(pin_c5); 
01FC:  BSF    07.5
.................... break; 
01FD:  GOTO   20C
....................  
.................... case 206: 
.................... output_high(pin_c5); 
01FE:  BSF    07.5
.................... break; 
01FF:  GOTO   20C
....................  
.................... case 162: 
.................... output_high(pin_c5); 
0200:  BSF    07.5
.................... break; 
0201:  GOTO   20C
....................  
.................... case 84: 
.................... output_low(pin_c5); 
0202:  BCF    07.5
.................... break; 
0203:  GOTO   20C
....................  
.................... case 170: 
.................... output_high(pin_c5); 
0204:  BSF    07.5
.................... break; 
0205:  GOTO   20C
....................  
.................... case 255: 
.................... output_high(pin_c5); 
0206:  BSF    07.5
.................... break; 
0207:  GOTO   20C
....................  
.................... case 85: 
.................... output_low(pin_c5); 
0208:  BCF    07.5
.................... break; 
0209:  GOTO   20C
....................  
.................... case 93: 
.................... output_low(pin_c5); 
020A:  BCF    07.5
....................  
.................... default: 
.................... output_low(pin_c5); 
020B:  BCF    07.5
....................  
.................... } 
020C:  GOTO   1C4
....................  
.................... } 
....................  
....................  
....................  
....................  
.................... } 
....................  
020D:  SLEEP
....................  

Configuration Fuses:
   Word  1: 3B73   RC NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
